// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: terra/smartaccounts/v1/setting.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Setting struct {
	// Owner that can do priviledged operations on the Smart Account
	// Defaults to the Smart Account Addr
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// List of contract addresses to perform auth instead of SigVerify
	Authorization []string `protobuf:"bytes,2,rep,name=authorization,proto3" json:"authorization,omitempty"`
	// List of contract addresses to perform pre-txn logic
	PreTransaction []string `protobuf:"bytes,3,rep,name=pre_transaction,json=preTransaction,proto3" json:"pre_transaction,omitempty"`
	// List of contract addresses to perform post-txn logic
	PostTransaction []string `protobuf:"bytes,4,rep,name=post_transaction,json=postTransaction,proto3" json:"post_transaction,omitempty"`
	// Fallback to default SigVerify if custom authorization fails
	Fallback bool `protobuf:"varint,5,opt,name=Fallback,proto3" json:"Fallback,omitempty"`
}

func (m *Setting) Reset()         { *m = Setting{} }
func (m *Setting) String() string { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()    {}
func (*Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_c23f889f9232d996, []int{0}
}
func (m *Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Setting.Merge(m, src)
}
func (m *Setting) XXX_Size() int {
	return m.Size()
}
func (m *Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Setting proto.InternalMessageInfo

func (m *Setting) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Setting) GetAuthorization() []string {
	if m != nil {
		return m.Authorization
	}
	return nil
}

func (m *Setting) GetPreTransaction() []string {
	if m != nil {
		return m.PreTransaction
	}
	return nil
}

func (m *Setting) GetPostTransaction() []string {
	if m != nil {
		return m.PostTransaction
	}
	return nil
}

func (m *Setting) GetFallback() bool {
	if m != nil {
		return m.Fallback
	}
	return false
}

func init() {
	proto.RegisterType((*Setting)(nil), "terra.smartaccounts.v1.Setting")
}

func init() {
	proto.RegisterFile("terra/smartaccounts/v1/setting.proto", fileDescriptor_c23f889f9232d996)
}

var fileDescriptor_c23f889f9232d996 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x31, 0x4e, 0x02, 0x41,
	0x14, 0x86, 0x59, 0x10, 0xc5, 0x49, 0x14, 0xb3, 0x21, 0x66, 0xa5, 0x98, 0x10, 0x63, 0x41, 0xc3,
	0x4e, 0x50, 0x6b, 0x13, 0x30, 0xb1, 0xb4, 0x00, 0x2b, 0x1b, 0x32, 0x0c, 0x93, 0x65, 0x23, 0x3b,
	0x6f, 0xf3, 0xe6, 0x81, 0xe2, 0x29, 0xbc, 0x80, 0xb7, 0xf0, 0x10, 0x96, 0xc4, 0xca, 0xd2, 0xc0,
	0x45, 0x0c, 0x3b, 0x46, 0x5d, 0x0b, 0xe9, 0xe6, 0xe5, 0xff, 0xfe, 0xaf, 0x98, 0x9f, 0x9d, 0x90,
	0x46, 0x94, 0xc2, 0x26, 0x12, 0x49, 0x2a, 0x05, 0x53, 0x43, 0x56, 0xcc, 0xda, 0xc2, 0x6a, 0xa2,
	0xd8, 0x44, 0x61, 0x8a, 0x40, 0xe0, 0x1f, 0x66, 0x54, 0x98, 0xa3, 0xc2, 0x59, 0xbb, 0x5e, 0x8b,
	0x20, 0x82, 0x0c, 0x11, 0xeb, 0x97, 0xa3, 0xeb, 0x47, 0x0a, 0x6c, 0x02, 0x76, 0xe0, 0x02, 0x77,
	0xb8, 0xe8, 0xf8, 0xb9, 0xc8, 0x76, 0xfa, 0x4e, 0xed, 0x87, 0xac, 0x0c, 0xf7, 0x46, 0x63, 0xe0,
	0x35, 0xbc, 0xe6, 0x6e, 0x37, 0x78, 0x7b, 0x69, 0xd5, 0xbe, 0xe0, 0xce, 0x68, 0x84, 0xda, 0xda,
	0x3e, 0x61, 0x6c, 0xa2, 0x9e, 0xc3, 0xfc, 0x0b, 0xb6, 0x27, 0xa7, 0x34, 0x06, 0x8c, 0x1f, 0x25,
	0xc5, 0x60, 0x82, 0x62, 0xa3, 0xf4, 0x6f, 0x2f, 0x8f, 0xfb, 0x1d, 0x56, 0x4d, 0x51, 0x0f, 0x08,
	0xa5, 0xb1, 0x52, 0x65, 0x86, 0xd2, 0x06, 0xc3, 0x7e, 0x8a, 0xfa, 0xe6, 0x87, 0xf7, 0x2f, 0xd9,
	0x41, 0x0a, 0x96, 0x72, 0x8e, 0xad, 0x0d, 0x8e, 0xea, 0xba, 0xf1, 0x5b, 0x52, 0x67, 0x95, 0x2b,
	0x39, 0x99, 0x0c, 0xa5, 0xba, 0x0b, 0xca, 0x0d, 0xaf, 0x59, 0xe9, 0x7d, 0xdf, 0xdd, 0xeb, 0xd7,
	0x25, 0xf7, 0x16, 0x4b, 0xee, 0x7d, 0x2c, 0xb9, 0xf7, 0xb4, 0xe2, 0x85, 0xc5, 0x8a, 0x17, 0xde,
	0x57, 0xbc, 0x70, 0x7b, 0x1e, 0xc5, 0x34, 0x9e, 0x0e, 0x43, 0x05, 0x89, 0xc8, 0xd6, 0x68, 0x25,
	0x60, 0xf4, 0x5c, 0x28, 0x40, 0x2d, 0x66, 0xa7, 0xe2, 0xe1, 0xcf, 0x86, 0x34, 0x4f, 0xb5, 0x1d,
	0x6e, 0x67, 0xdf, 0x7e, 0xf6, 0x19, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x0a, 0x95, 0x1d, 0xe7, 0x01,
	0x00, 0x00,
}

func (m *Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fallback {
		i--
		if m.Fallback {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.PostTransaction) > 0 {
		for iNdEx := len(m.PostTransaction) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PostTransaction[iNdEx])
			copy(dAtA[i:], m.PostTransaction[iNdEx])
			i = encodeVarintSetting(dAtA, i, uint64(len(m.PostTransaction[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PreTransaction) > 0 {
		for iNdEx := len(m.PreTransaction) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreTransaction[iNdEx])
			copy(dAtA[i:], m.PreTransaction[iNdEx])
			i = encodeVarintSetting(dAtA, i, uint64(len(m.PreTransaction[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Authorization) > 0 {
		for iNdEx := len(m.Authorization) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Authorization[iNdEx])
			copy(dAtA[i:], m.Authorization[iNdEx])
			i = encodeVarintSetting(dAtA, i, uint64(len(m.Authorization[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintSetting(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSetting(dAtA []byte, offset int, v uint64) int {
	offset -= sovSetting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovSetting(uint64(l))
	}
	if len(m.Authorization) > 0 {
		for _, s := range m.Authorization {
			l = len(s)
			n += 1 + l + sovSetting(uint64(l))
		}
	}
	if len(m.PreTransaction) > 0 {
		for _, s := range m.PreTransaction {
			l = len(s)
			n += 1 + l + sovSetting(uint64(l))
		}
	}
	if len(m.PostTransaction) > 0 {
		for _, s := range m.PostTransaction {
			l = len(s)
			n += 1 + l + sovSetting(uint64(l))
		}
	}
	if m.Fallback {
		n += 2
	}
	return n
}

func sovSetting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSetting(x uint64) (n int) {
	return sovSetting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSetting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSetting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSetting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorization = append(m.Authorization, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreTransaction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSetting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreTransaction = append(m.PreTransaction, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostTransaction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSetting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostTransaction = append(m.PostTransaction, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fallback", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fallback = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSetting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSetting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSetting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSetting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSetting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSetting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSetting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSetting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSetting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSetting = fmt.Errorf("proto: unexpected end of group")
)
